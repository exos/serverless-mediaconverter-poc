# IAM configuration for lambda role

role:
  statements:

    # Allow read of media folder to generate valid public urls
    - Sid: "AllowS3ReadObject"
      Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        - Fn::GetAtt: [ UploadMediaBucket, Arn ]
        - Fn::Join:
          - '/'
          - - Fn::GetAtt: [ UploadMediaBucket, Arn ] 
            - ${self:custom.mediaFolder}
            - "*"

    # Allow write on upload folder to generate valid uploads urls
    - Sid: "AllowS3PutObject"
      Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - Fn::GetAtt: [ UploadMediaBucket, Arn ]
        - Fn::Join:
          - '/'
          - - Fn::GetAtt: [ UploadMediaBucket, Arn ] 
            - ${self:custom.uploadFolder}
            - "*"

    # Allow use DynamoDB
    - Sid: "AllowDynamoDB"
      Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - Fn::GetAtt: [ VideosDb, Arn ]

    # Allow get MediaConverter endpoints (for zero conf)
    - Sid: "MediaConverterDescribeEndpoints"
      Effect: Allow
      Action:
        - mediaconvert:DescribeEndpoints
      Resource:
        - Fn::Join:
          - ''
          - - 'arn:aws:mediaconvert:'
            - ${self:custom.region}
            - ':'
            - ${self:custom.accountId}
            - ':endpoints/*'

    # Allow create Media Converter jobs
    - Sid: "MediaConverterCreateJob"
      Effect: Allow
      Action:
        - mediaconvert:CreateJob
      Resource:
        - Fn::GetAtt: [ VODQueue, Arn ]

    # Allow to pass Media Converter role
    - Sid: "MediaConverterPassRole"
      Effect: Allow
      Action:
        - iam:PassRole
      Resource:
        - Fn::GetAtt: [ MediaConverterRole, Arn ]
